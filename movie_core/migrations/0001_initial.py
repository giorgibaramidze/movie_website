# Generated by Django 3.2.8 on 2021-11-06 12:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actor', models.CharField(max_length=255)),
                ('actor_image', models.ImageField(upload_to='images/actors')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Countrie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('director', models.CharField(max_length=255)),
                ('director_image', models.ImageField(upload_to='images/director')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Genrie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='MovieCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Voice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voice', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='users/2.svg', upload_to='users/profile_pictures')),
                ('user', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_geo', models.CharField(max_length=255)),
                ('title_eng', models.CharField(max_length=255)),
                ('duration', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ფილმი', 'ფილმი'), ('სერიალი', 'სერიალი'), ('თრეილერი', 'თრეილერი')], max_length=255)),
                ('description', models.TextField(max_length=255)),
                ('imdb', models.FloatField(choices=[(1.1, 1.1), (1.2000000000000002, 1.2), (1.3000000000000003, 1.3), (1.4000000000000004, 1.4), (1.5000000000000004, 1.5), (1.6000000000000005, 1.6), (1.7000000000000006, 1.7), (1.8000000000000007, 1.8), (1.9000000000000008, 1.9), (2.000000000000001, 2.0), (2.100000000000001, 2.1), (2.200000000000001, 2.2), (2.300000000000001, 2.3), (2.4000000000000012, 2.4), (2.5000000000000013, 2.5), (2.6000000000000014, 2.6), (2.7000000000000015, 2.7), (2.8000000000000016, 2.8), (2.9000000000000017, 2.9), (3.0000000000000018, 3.0), (3.100000000000002, 3.1), (3.200000000000002, 3.2), (3.300000000000002, 3.3), (3.400000000000002, 3.4), (3.500000000000002, 3.5), (3.6000000000000023, 3.6), (3.7000000000000024, 3.7), (3.8000000000000025, 3.8), (3.9000000000000026, 3.9), (4.000000000000003, 4.0), (4.100000000000003, 4.1), (4.200000000000003, 4.2), (4.3000000000000025, 4.3), (4.400000000000003, 4.4), (4.5000000000000036, 4.5), (4.600000000000003, 4.6), (4.700000000000003, 4.7), (4.800000000000003, 4.8), (4.900000000000004, 4.9), (5.0000000000000036, 5.0), (5.100000000000003, 5.1), (5.200000000000003, 5.2), (5.300000000000004, 5.3), (5.400000000000004, 5.4), (5.5000000000000036, 5.5), (5.600000000000003, 5.6), (5.700000000000005, 5.7), (5.800000000000004, 5.8), (5.900000000000004, 5.9), (6.0000000000000036, 6.0), (6.100000000000005, 6.1), (6.200000000000005, 6.2), (6.300000000000004, 6.3), (6.400000000000004, 6.4), (6.500000000000005, 6.5), (6.600000000000005, 6.6), (6.700000000000005, 6.7), (6.800000000000004, 6.8), (6.900000000000006, 6.9), (7.000000000000005, 7.0), (7.100000000000005, 7.1), (7.200000000000005, 7.2), (7.300000000000006, 7.3), (7.400000000000006, 7.4), (7.500000000000005, 7.5), (7.600000000000005, 7.6), (7.700000000000006, 7.7), (7.800000000000006, 7.8), (7.900000000000006, 7.9), (8.000000000000005, 8.0), (8.100000000000007, 8.1), (8.200000000000006, 8.2), (8.300000000000006, 8.3), (8.400000000000006, 8.4), (8.500000000000007, 8.5), (8.600000000000007, 8.6), (8.700000000000006, 8.7), (8.800000000000006, 8.8), (8.900000000000007, 8.9), (9.000000000000007, 9.0), (9.100000000000007, 9.1), (9.200000000000006, 9.2), (9.300000000000006, 9.3), (9.400000000000007, 9.4), (9.500000000000007, 9.5), (9.600000000000007, 9.6), (9.700000000000008, 9.7), (9.800000000000008, 9.8), (9.900000000000007, 9.9), (10.000000000000007, 10.0)])),
                ('year', models.IntegerField(choices=[(1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020), (2021, 2021), (2022, 2022), (2023, 2023), (2024, 2024)])),
                ('video', models.FileField(blank=True, upload_to='videos/movies')),
                ('cover_image', models.ImageField(upload_to='images/movies/cover_image')),
                ('banner_image', models.ImageField(upload_to='images/movies/banner_image')),
                ('views', models.IntegerField(blank=True, default=0, editable=False, null=True)),
                ('actors', models.ManyToManyField(to='movie_core.Actor')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_core.moviecollection')),
                ('countries', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_core.countrie')),
                ('directors', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_core.director')),
                ('favourite', models.ManyToManyField(blank=True, editable=False, related_name='favourite', to=settings.AUTH_USER_MODEL)),
                ('genries', models.ManyToManyField(to='movie_core.Genrie')),
                ('likes', models.ManyToManyField(blank=True, editable=False, related_name='likes', to=settings.AUTH_USER_MODEL)),
                ('tag', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('voices', models.ManyToManyField(to='movie_core.Voice')),
                ('watch_later', models.ManyToManyField(blank=True, editable=False, related_name='watch_later', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_core.movie')),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='movie_core.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='movie_core.profile')),
            ],
        ),
    ]
